% after a network has been trained, use this script to try it out on 
% new data (generated by another call of generateTrainTestData or
% otherwise

initialRunlength = 640; plotRunlength = 3200*6*6;
samplelength = initialRunlength + plotRunlength;
offs = 100000;
sampleinput = LFP_ds([1:samplelength]+offs)';
sampleout = [real(LFP_hilbert([1:samplelength]+offs))'; imag(LFP_hilbert([1:samplelength]+offs))'];
inputscaling = [0.125]; inputshift = [0];
teacherscaling = [0.25;0.25]; teachershift = [0;0];
generateTrainTestData;

%initialRunlength = 100;  plotRunlength = 200;
offset = 0; % time after which data from sampleinput and sampleout are used
plotStates = [1 2 3 4]; 

totalstate =  zeros(totalDim, 1);    
internalState = totalstate(1:netDim);
teacherPL = zeros(outputLength, plotRunlength);
netOutPL = zeros(outputLength, plotRunlength);
if inputLength > 0
    inputPL = zeros(inputLength, plotRunlength);
end
statePL = zeros(length(plotStates),plotRunlength);
plotindex = 0;
msetest = zeros(1,outputLength); 

%totalstate (503x1) totalDim = 503
%intWM (500x500) netDim = 500
%inWM (500x1)
%ofbWM (500x2)
%outWM (2x501)
%internalState (500x1)

% f() is tanh()

for i = 1:initialRunlength + plotRunlength 
    
    if inputLength > 0
        in = [diag(inputscaling) * sampleinput(:,i+offset) + inputshift];  % in is column vector  
    else in = [];
    end
    teach = [diag(teacherscaling)* sampleout(:,i+offset) + teachershift];    % teach is column vector     
    
    %write input into totalstate
    if inputLength > 0
        totalstate(netDim+1:netDim+inputLength) = in; 
    end
    %update totalstate except at input positions  
    if linearNetwork       
            internalState = ([intWM, inWM, ofbWM]*totalstate);         
    else        
            internalState = f([intWM, inWM, ofbWM]*totalstate);          
    end    
    if linearOutputUnits
        netOut = outWM *[internalState;in];
    else
        netOut = f(outWM *[internalState;in]);
    end
    totalstate = [internalState;in;netOut];    
    
    %force teacher output 
    if i <= initialRunlength 
        totalstate(netDim+inputLength+1:netDim+inputLength+outputLength) = teach; 
    end
    %update msetest
    if i > initialRunlength 
        for j = 1:outputLength
            msetest(1,j) = msetest(1,j) + (teach(j,1)- netOut(j,1))^2;
        end
    end
    
    %write plotting data into various plotfiles
    if i > initialRunlength  
        plotindex = plotindex + 1;
        if inputLength > 0
            inputPL(:,plotindex) = in;
        end
        teacherPL(:,plotindex) = teach; 
        netOutPL(:,plotindex) = netOut;
        for j = 1:length(plotStates)
            statePL(j,plotindex) = totalstate(plotStates(j),1);
        end
    end
end
%end of the great do-loop


% print diagnostics 
msetestresult = msetest / plotRunlength;
teacherVariance = var(teacherPL');;
disp(sprintf('test NRMSE = %s', num2str(sqrt(msetestresult ./ teacherVariance))));

% plot overlay of network output and teacher  
figure(5);
subplot(outputLength+1,1,1);   
plot(1:plotRunlength,teacherPL(1,:), 1:plotRunlength,netOutPL(1,:));
title('teacher (blue) vs. net output (green)','FontSize',8);
for k = 2:outputLength
    subplot(outputLength+1,1,k);
    plot(1:plotRunlength,teacherPL(k,:), 1:plotRunlength,netOutPL(k,:));
end  


    subplot(outputLength+1,1,outputLength+1);
    tgtphase=angle(complex(teacherPL(1,:),teacherPL(2,:)));
    outphase=angle(complex(netOutPL(1,:),netOutPL(2,:)));
    outenv=abs(complex(netOutPL(1,:),netOutPL(2,:)));
    plot(1:plotRunlength,tgtphase, 1:plotRunlength,outphase);

    erm=circ_dist(tgtphase,outphase);
    badvals=find(outenv<median(outenv));
    erm(badvals)=NaN;
    outphase(badvals)=NaN;
    figure(6); clf;
    subplot(6,6,1); rose(erm(1:3200));
    for i=2:36
     subplot(6,6,i); rose(erm([1:3200]+(i-1)*3200));
    end

    valleys=find(diff(outphase)<-6);
    peaks=find(outphase(1:end-1)<0 & outphase(2:end)>0);
    meanval=zeros(321,1);
    for i=1:length(valleys)-10
        meanval=meanval+sampleinput((640+valleys(i)-160):(640+valleys(i)+160))';
    end
   meanval=meanval/max(meanval);
    meanpeak=zeros(321,1);
    for i=1:length(peaks)-10
        meanpeak=meanpeak+sampleinput((640+peaks(i)-160):(640+peaks(i)+160))';
    end
   meanpeak=meanpeak/max(meanpeak);
   figure(7); clf; plot(meanval,'g'); hold on; plot(meanpeak,'r');
   line([160 160],[min(meanval) max(meanval)]); axis tight;

